<?xml version="1.0" encoding="UTF-8"?>
<office:document-content xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rpt="http://openoffice.org/2005/report" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:officeooo="http://openoffice.org/2009/office" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:css3t="http://www.w3.org/TR/css3-text/" office:version="1.2"><office:scripts/><office:font-face-decls><style:font-face style:name="Lohit Marathi1" svg:font-family="&apos;Lohit Marathi&apos;"/><style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/><style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/><style:font-face style:name="Droid Sans Fallback" svg:font-family="&apos;Droid Sans Fallback&apos;" style:font-family-generic="system" style:font-pitch="variable"/><style:font-face style:name="Lohit Marathi" svg:font-family="&apos;Lohit Marathi&apos;" style:font-family-generic="system" style:font-pitch="variable"/></office:font-face-decls><office:automatic-styles><style:style style:name="P1" style:family="paragraph" style:parent-style-name="Standard"><style:text-properties officeooo:rsid="00072661" officeooo:paragraph-rsid="00072661"/></style:style><style:style style:name="P2" style:family="paragraph" style:parent-style-name="Standard"><style:text-properties officeooo:rsid="0008b43c" officeooo:paragraph-rsid="0008b43c"/></style:style><style:style style:name="P3" style:family="paragraph" style:parent-style-name="Text_20_body"><style:text-properties officeooo:rsid="0008b43c" officeooo:paragraph-rsid="0008b43c"/></style:style><style:style style:name="T1" style:family="text"><style:text-properties officeooo:rsid="0008b43c"/></style:style><style:style style:name="T2" style:family="text"><style:text-properties style:text-position="super 58%" officeooo:rsid="0008b43c"/></style:style><style:style style:name="T3" style:family="text"><style:text-properties style:text-position="0% 100%"/></style:style></office:automatic-styles><office:body><office:text text:use-soft-page-breaks="true"><text:sequence-decls><text:sequence-decl text:display-outline-level="0" text:name="Illustration"/><text:sequence-decl text:display-outline-level="0" text:name="Table"/><text:sequence-decl text:display-outline-level="0" text:name="Text"/><text:sequence-decl text:display-outline-level="0" text:name="Drawing"/></text:sequence-decls><text:p text:style-name="Title">Declan Mulligan 12302297 : 3D3 Project 1 Description</text:p><text:p text:style-name="P3">The aim of this project was to simulate file transfer using datagram sockets. My program creates frames, correctly calculates CRC, can repeat sending frames on corrupted/dropped packets and ends with a full and correct output file based on the file inputted by the client.</text:p><text:p text:style-name="P1"/><text:h text:style-name="Heading_20_1" text:outline-level="1">Client:</text:h><text:p text:style-name="P1"/><text:p text:style-name="P1">The algorithm for the client was as follows:</text:p><text:p text:style-name="P1"><text:tab/>Check if resending</text:p><text:p text:style-name="P1"><text:tab/>If you are, recreate the frame</text:p><text:p text:style-name="P1"><text:tab/>If not, read in the next 8 bytes from the input file</text:p><text:p text:style-name="P1"><text:tab/><text:tab/>and increment the frameID counter</text:p><text:p text:style-name="P1"><text:tab/></text:p><text:p text:style-name="P1"><text:tab/>Create 13 byte char* place </text:p><text:p text:style-name="P1"><text:tab/>frameID (i.e. header) in [0]</text:p><text:p text:style-name="P1"><text:tab/>read in payload to next 8 bytes</text:p><text:p text:style-name="P1"><text:tab/>calculate CRC, split hex digits into individual bytes (through bitshifting and masking)</text:p><text:p text:style-name="P1"><text:tab/><text:tab/><text:span text:style-name="T1">The bytes were transferred as themselves + 0x20. This was done as the nature of <text:tab/><text:tab/><text:tab/>char* and low numbers in ASCII having special functions led to unreliable transfer <text:tab/><text:tab/>of data. After multiple iterations, this was the best implementation we could find. </text:span></text:p><text:p text:style-name="P1"><text:tab/>Run the gremlin function</text:p><text:p text:style-name="P1"><text:tab/>Place in the buffer and send</text:p><text:p text:style-name="P1"><text:tab/><text:span text:style-name="T1">reset resend to 1</text:span></text:p><text:p text:style-name="P1"><text:tab/><text:span text:style-name="T1">Receive two bytes <text:s/>of data from the server</text:span></text:p><text:p text:style-name="P1"><text:tab/><text:span text:style-name="T1">Check 2</text:span><text:span text:style-name="T2">nd</text:span><text:span text:style-name="T1"> byte, if zero resend, else move onto next 8 characters</text:span></text:p><text:p text:style-name="P2"/><text:h text:style-name="Heading_20_1" text:outline-level="1">Server:</text:h><text:p text:style-name="P1"/><text:p text:style-name="P2">The algorithm for the server was as follows:</text:p><text:p text:style-name="P2"><text:tab/>Receive frame</text:p><text:p text:style-name="P2"><text:tab/>Separate components and recalculate given CRC value</text:p><text:p text:style-name="P2"><text:tab/>Recalculate CRC based on payload</text:p><text:p text:style-name="P2"><text:tab/>Check if they match, give this info back to client</text:p><text:p text:style-name="P2"><text:tab/>If they match, increment the loop counter</text:p><text:p text:style-name="P2"><text:tab/>loop</text:p><text:p text:style-name="P2"><text:tab/></text:p><text:p text:style-name="P1"/><text:p text:style-name="P1"/><text:p text:style-name="P1"><text:tab/></text:p><text:p text:style-name="P1"/><text:p text:style-name="P1"><text:tab/><text:tab/></text:p><text:p text:style-name="P1"><text:tab/><text:tab/></text:p><text:p text:style-name="P1"><text:tab/></text:p><text:p text:style-name="P1"><text:soft-page-break/><text:tab/></text:p></office:text></office:body></office:document-content>